Index: configure.ac
===================================================================
--- configure.ac        (revision 136130)
+++ configure.ac        (working copy)
@@ -119,6 +119,14 @@
 AC_SUBST(CFLAGS)
 AC_SUBST(CXXFLAGS)

+# this hack will be dropped once we get this working:
+# http://www.mono-project.com/Moonlight/SecurityStatus#Assembly_Loading
+if test "x$MOON_A11Y_INTERNAL_HACK" = "x1"; then
+       AC_DEFINE([MOON_A11Y_INTERNAL_HACK], [1],
+                 [Whether Mono A11y is enabled for now])
+fi
+
 AC_OUTPUT([
 moon.pc
 Makefile
Index: src/security.c
===================================================================
--- src/security.c	(revision 136049)
+++ src/security.c	(working copy)
@@ -16,6 +16,7 @@
 #if MONO_ENABLE_CORECLR_SECURITY
 
 static struct stat platform_stat;
+static struct stat platform_a11y_stat;
 
 const static char* platform_code_assemblies [] = {
 	"mscorlib.dll",
@@ -32,6 +33,9 @@
 #if DEBUG
 	"jtr.dll",
 #endif
+#if MOON_A11Y_INTERNAL_HACK
+	"MoonAtkBridge.dll",
+#endif
 };
 
 static gboolean
@@ -55,23 +63,43 @@
 	if ((platform_stat.st_mode != info.st_mode) ||
 		(platform_stat.st_ino != info.st_ino) ||
 		(platform_stat.st_dev != info.st_dev)) {
-		g_free (dir);
-		return FALSE;
+		if ((platform_a11y_stat.st_mode != info.st_mode) ||
+			(platform_a11y_stat.st_ino != info.st_ino) ||
+			(platform_a11y_stat.st_dev != info.st_dev)) {
+			g_free (dir);
+			return FALSE;
+		}
 	}
 	g_free (dir);
 
@@ -87,8 +116,38 @@
 			   "to a wide variety of attack vectors. Don't do this unless you know what\n"
 			   "you're doing!");
 	} else if (g_path_is_absolute (platform_dir)) {
 		memset (&platform_stat, 0, sizeof (platform_stat));
+
 		if (stat (platform_dir, &platform_stat) == 0) {
+
+			const char* moonlight_at_novell = g_strrstr (platform_dir, "moonlight@novell.com");
+			if (moonlight_at_novell != NULL) {
+				const char* after = g_strdup ("moonlight-a11y@novell.com/components");
+
+				const char* before = g_strndup (platform_dir, 
+				                                strlen(platform_dir) - strlen(moonlight_at_novell));
+				const char* platform_a11y_dir = g_strconcat (before, after, NULL);
+
+				memset (&platform_a11y_stat, 0, sizeof (platform_a11y_stat));
+				stat (platform_a11y_dir, &platform_a11y_stat);
+				g_free (platform_a11y_dir);
+				g_free (before);
+				g_free (after);
+				moonlight_at_novell = NULL;
+			}
+
+
 			mono_security_enable_core_clr ();
 			mono_security_set_core_clr_platform_callback (determine_platform_image);
 		}
Index: class/tuning/SecurityAttributes/overrides/System.Windows.manual
===================================================================
--- class/tuning/SecurityAttributes/overrides/System.Windows.manual	(revision 136049)
+++ class/tuning/SecurityAttributes/overrides/System.Windows.manual	(working copy)
@@ -8,3 +8,6 @@
 
 # this method reflects into GCHandle to avoid creating an exception every time we try a invalid handle
 +SC-M: System.Boolean Mono.Helper::GCHandleInDomain(System.IntPtr)
+
+# this method is called by the embedding API from moon
++SSC-M: System.IntPtr Mono.A11yHelper::GetAccessible()
Index: class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc
===================================================================
--- class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc	(revision 136049)
+++ class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc	(working copy)
@@ -1,7 +1,9 @@
 # [SecuritySafeCritical] needed inside System.Windows to call all [SecurityCritical] methods
-# 462 methods
+# 464 methods
 
 +SSC-M: System.Void Microsoft.Internal.TextBoxView::.ctor()
++SSC-M: System.Void Mono.A11yHelper::Initialize()
++SSC-M: System.Void Mono.A11yHelper::Launch(System.String)
 +SSC-M: Mono.Xaml.ManagedXamlLoader Mono.ApplicationLauncher::CreateXamlLoader(System.IntPtr,System.IntPtr,System.IntPtr,System.String,System.String)
 +SSC-M: System.Void Mono.DispatcherTimer::.ctor()
 +SSC-M: System.Void Mono.EasingFunctionWrapper::ReportException(System.Exception)
