Index: class/Managed.Windows.Forms/System.Windows.Forms/X11DesktopColors.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/X11DesktopColors.cs	(revision 105725)
+++ class/Managed.Windows.Forms/System.Windows.Forms/X11DesktopColors.cs	(working copy)
@@ -28,6 +28,7 @@
 using System.Drawing;
 using System.Runtime.InteropServices;
 using System.IO;
+using System;
 
 namespace System.Windows.Forms {
 	internal class X11DesktopColors {
@@ -86,6 +87,7 @@
 
 		#region Constructors
 		static X11DesktopColors() {
+			
 			FindDesktopEnvironment();
 			
 			switch(desktop) {
@@ -97,7 +99,7 @@
 					GtkStyleStruct	style;
 
 					try {
-						gtk_init_check (IntPtr.Zero, IntPtr.Zero);
+						GtkInit();
 						//dispmgr =  gdk_display_manager_get ();
 						//gdkdisplay =  gdk_display_manager_get_default_display (dispmgr);
 
@@ -145,6 +147,27 @@
 				}
 			}
 		}
+
+		static void GtkInit ()
+		{
+//no SetEnv in 1.x
+#if NET_2_0
+			// Prevent ATK bridge initalization, as it causes
+			// conflicts with the UIA<->ATK bridge.
+			// A better solution would probably be to get these
+			// values out-of-process.  See details/discussion here:
+			// https://bugzilla.novell.com/show_bug.cgi?id=375987
+			string dangerousEnvVar = "GTK_MODULES";
+			string gtkModulesEnvVarContent = Environment.GetEnvironmentVariable (dangerousEnvVar);
+			Environment.SetEnvironmentVariable (dangerousEnvVar, string.Empty);
+#endif
+
+			gtk_init_check (IntPtr.Zero, IntPtr.Zero);
+
+#if NET_2_0
+			Environment.SetEnvironmentVariable (dangerousEnvVar, gtkModulesEnvVarContent);
+#endif
+		}
 		#endregion	// Constructors
 
 		#region Properties
Index: class/Managed.Windows.Forms/System.Windows.Forms/Application.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/Application.cs	(revision 105725)
+++ class/Managed.Windows.Forms/System.Windows.Forms/Application.cs	(working copy)
@@ -154,12 +154,58 @@
 #endif
 		private static VisualStyleState visual_style_state = VisualStyleState.ClientAndNonClientAreasEnabled;
 
+#if NET_2_0
+		private const string UIAutomationWinformsAssembly =
+			"UIAutomationWinforms, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f4ceacb585d99812";
+		private const string UIAFormListenerType =
+			"Mono.UIAutomation.Winforms.FormListener";
+		private const string UIAFormListenerInitializeMethod =
+			"Initialize";
+#endif
+  
 		private Application ()
 		{
 		}
 
+#if NET_2_0
+		static Application ()
+		{
+			// Attempt to load UIA support for winforms
+			InitializeUIAutomation ();
+		}
+#endif
+
 		#region Private Methods
-
+		
+#if NET_2_0
+		private static void InitializeUIAutomation ()
+		{
+			Assembly mwfProviders = null;
+			try {
+				mwfProviders =
+					Assembly.Load (UIAutomationWinformsAssembly);
+			} catch { }
+			
+			if (mwfProviders == null)
+				return;
+			
+			try {
+				Type listenerType =
+					mwfProviders.GetType (UIAFormListenerType,
+					                      false);
+				if (listenerType == null)
+					return;
+				MethodInfo initMethod =
+					listenerType.GetMethod (UIAFormListenerInitializeMethod,
+					                        BindingFlags.Static | BindingFlags.Public);
+				if (initMethod == null)
+					return;
+				initMethod.Invoke (null,
+				                   new object [] {});
+			} catch { }
+		}
+#endif
+		
 		internal static void CloseForms (Thread thread)
 		{
 			#if DebugRunLoop
@@ -685,6 +731,8 @@
 		public static void Run (ApplicationContext context)
 		{
 #if NET_2_0
+			if (PreRun != null)
+				PreRun (null, EventArgs.Empty);
 			// If a sync context hasn't been created by now, create
 			// a default one
 			if (SynchronizationContext.Current == null)
@@ -974,8 +1022,11 @@
 
 		public static event EventHandler ThreadExit;
 		public static event ThreadExceptionEventHandler ThreadException;
+		
+#if NET_2_0
+		internal static event EventHandler FormAdded;
+		internal static event EventHandler PreRun;
 
-#if NET_2_0
 		[EditorBrowsable (EditorBrowsableState.Advanced)]
 		public static event EventHandler EnterThreadModal;
 
@@ -1009,6 +1060,10 @@
 		{
 			lock (forms)
 				forms.Add (f);
+#if NET_2_0
+			if (FormAdded != null)
+				FormAdded (f, null);
+#endif
 		}
 		
 		internal static void RemoveForm (Form f)
