Index: class/Managed.Windows.Forms/System.Windows.Forms/Application.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/Application.cs	(revision 96906)
+++ class/Managed.Windows.Forms/System.Windows.Forms/Application.cs	(working copy)
@@ -153,10 +153,41 @@
 		private static ToolStrip keyboard_capture;
 		private static VisualStyleState visual_style_state = VisualStyleState.ClientAndNonClientAreasEnabled;
 #endif
+		
+		private const string UIAutomationWinformsAssembly =
+			"UIAutomationWinforms, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f4ceacb585d99812";
+		private const string UIAFormListenerType =
+			"Mono.UIAutomation.Winforms.FormListener";
+		private const string UIAFormListnerInitializeMethod =
+			"Initialize";
 
 		private Application ()
 		{
 		}
+		
+		// TODO: Any #if checks required here?
+		static Application ()
+		{
+			// TODO: Check if accessibility is turned on first
+			Assembly mwfProviders = null;
+			try {
+				mwfProviders =
+					Assembly.Load (UIAutomationWinformsAssembly);
+			} catch { }
+			
+			if (mwfProviders != null) {
+				Type listenerType =
+					mwfProviders.GetType (UIAFormListenerType, false);
+				if (listenerType != null) {
+					MethodInfo initMethod =
+						listenerType.GetMethod (UIAFormListnerInitializeMethod, BindingFlags.Static | BindingFlags.Public);
+					if (initMethod != null) {
+						initMethod.Invoke (null, new object [] {});
+					}
+				}
+			}
+		}
 
 		#region Private Methods
 
@@ -964,6 +995,8 @@
 
 		public static event EventHandler ThreadExit;
 		public static event ThreadExceptionEventHandler ThreadException;
+		
+		internal static event EventHandler FormAdded;
 
 #if NET_2_0
 		[EditorBrowsable (EditorBrowsableState.Advanced)]
@@ -999,6 +1032,8 @@
 		{
 			lock (forms)
 				forms.Add (f);
+			if (FormAdded != null)
+				FormAdded (f, null);
 		}
 		
 		internal static void RemoveForm (Form f)
 
