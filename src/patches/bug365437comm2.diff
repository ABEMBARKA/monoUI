Index: atk/Object.custom
===================================================================
--- atk/Object.custom	(revision 101557)
+++ atk/Object.custom	(working copy)
@@ -92,3 +92,19 @@
 			return null;
 		}
 
+		protected void EmitChildrenChanged (ChildrenChangedDetail detail, 
+											int childNumber, Atk.Object child)
+		{
+			object[] args = new object[2];
+			args [0] = childNumber;
+			args [1] = child;
+			
+			GLib.Signal.Emit (this, "children-changed", detail.ToString().ToLower(), args);
+		}
+		
+		protected enum ChildrenChangedDetail
+		{
+			Add,
+			Remove
+		}
+		
\ No newline at end of file
Index: atk/Util.custom
===================================================================
--- atk/Util.custom	(revision 101557)
+++ atk/Util.custom	(working copy)
@@ -21,10 +21,42 @@
 // Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 // Boston, MA 02111-1307, USA.
 
+		[GLib.CDeclCallback]
+		delegate int AddGlobalListenerNativeDelegate (IntPtr listener, string event_type);
 
+		static AddGlobalListenerDelegate add_global_event_listener_handler;
+		static AddGlobalListenerNativeDelegate add_global_event_listener_callback;
+
+		static int AddGlobalEventListenerCallback (IntPtr listener, string event_type)
+		{
+			try {
+				return add_global_event_listener_handler (listener, event_type);
+			} catch (Exception e) {
+				GLib.ExceptionManager.RaiseUnhandledException (e, false);
+			}
+			
+			return 0;
+		}
+
+		[DllImport("atksharpglue-2")]
+		static extern void atksharp_util_override_add_global_event_listener (AddGlobalListenerNativeDelegate cb);
+		
+		public delegate int AddGlobalListenerDelegate (IntPtr listener, string event_type);
+
+		public static AddGlobalListenerDelegate AddGlobalEventListenerHandler {
+			set {
+				add_global_event_listener_handler = value;
+				if (add_global_event_listener_callback == null)
+					add_global_event_listener_callback = new AddGlobalListenerNativeDelegate (AddGlobalEventListenerCallback);
+				atksharp_util_override_add_global_event_listener (add_global_event_listener_callback);
+			}
+		}
+
+
+
 		[GLib.CDeclCallback]
 		delegate void RemoveListenerNativeDelegate (uint listener_id);
-                
+
 		static RemoveListenerDelegate remove_global_event_listener_handler;
 		static RemoveListenerNativeDelegate remove_global_event_listener_callback;
 
@@ -40,6 +72,7 @@
 		[DllImport("atksharpglue-2")]
 		static extern void atksharp_util_override_remove_global_event_listener (RemoveListenerNativeDelegate cb);
 		
+		//shared by RemoveGlobalEventListener and RemoveKeyEventListener
 		public delegate void RemoveListenerDelegate (uint listener_id);
 
 		public static RemoveListenerDelegate RemoveGlobalEventListenerHandler {
@@ -80,7 +113,7 @@
 
 		[GLib.CDeclCallback]
 		delegate uint AddKeyEventListenerNativeDelegate (AtkSharp.KeySnoopFuncNative native_func, IntPtr data);
-                
+
 		static AddKeyEventListenerDelegate add_key_event_listener_handler;
 		static AddKeyEventListenerNativeDelegate add_key_event_listener_callback;
 
@@ -134,7 +167,7 @@
 
 		[GLib.CDeclCallback]
 		delegate IntPtr GetRootNativeDelegate ();
-                
+
 		static GetRootDelegate get_root_handler;
 		static GetRootNativeDelegate get_root_callback;
 
@@ -161,10 +194,10 @@
 				atksharp_util_override_get_root (get_root_callback);
 			}
 		}
-               
+
 		[GLib.CDeclCallback]
 		delegate IntPtr GetToolkitNameNativeDelegate ();
-                
+
 		static GetToolkitNameDelegate get_toolkit_name_handler;
 		static GetToolkitNameNativeDelegate get_toolkit_name_callback;
 		static string toolkit_name;
@@ -199,10 +232,10 @@
 				atksharp_util_override_get_toolkit_name (get_toolkit_name_callback);
 			}
 		}
-               
+
 		[GLib.CDeclCallback]
 		delegate IntPtr GetToolkitVersionNativeDelegate ();
-                
+
 		static GetToolkitVersionDelegate get_toolkit_version_handler;
 		static GetToolkitVersionNativeDelegate get_toolkit_version_callback;
 		static string toolkit_version;
@@ -237,4 +270,3 @@
 				atksharp_util_override_get_toolkit_version (get_toolkit_version_callback);
 			}
 		}
-               
Index: atk/glue/util.c
===================================================================
--- atk/glue/util.c	(revision 101557)
+++ atk/glue/util.c	(working copy)
@@ -29,14 +29,15 @@
 void atksharp_util_override_get_toolkit_name (gpointer cb);
 void atksharp_util_override_get_toolkit_version (gpointer cb);
 
-void
-atksharp_util_override_add_global_event_listener (gpointer cb)
-{
-	AtkUtilClass *klass = g_type_class_peek (ATK_TYPE_UTIL);
-	if (!klass)
-		klass = g_type_class_ref (ATK_TYPE_UTIL);
-	((AtkUtilClass *) klass)->add_global_event_listener = cb;
-}
+//	disabled until we can get rid of the workaround:
+//void
+//atksharp_util_override_add_global_event_listener (gpointer cb)
+//{
+//	AtkUtilClass *klass = g_type_class_peek (ATK_TYPE_UTIL);
+//	if (!klass)
+//		klass = g_type_class_ref (ATK_TYPE_UTIL);
+//	((AtkUtilClass *) klass)->add_global_event_listener = cb;
+//}
 
 void
 atksharp_util_override_remove_global_event_listener (gpointer cb)
@@ -92,3 +93,111 @@
 	((AtkUtilClass *) klass)->get_toolkit_version = cb;
 }
 
+
+//workaround:
+
+static GHashTable *listener_list = NULL;
+
+guint atksharp_util_add_global_event_listener(
+	GSignalEmissionHook listener,
+	const gchar *event_type);
+
+static void
+_listener_info_destroy (gpointer data)
+{
+	g_free(data);
+}
+
+void
+atksharp_util_override_add_global_event_listener (gpointer cb)
+{
+	AtkUtilClass *klass = g_type_class_peek (ATK_TYPE_UTIL);
+	if (!klass)
+		klass = g_type_class_ref (ATK_TYPE_UTIL);
+	//disabled until we can get rid of the workaround:
+	//((AtkUtilClass *) klass)->add_global_event_listener = cb;
+	((AtkUtilClass *) klass)->add_global_event_listener = atksharp_util_add_global_event_listener;
+	
+	listener_list = g_hash_table_new_full(g_int_hash, g_int_equal, NULL, _listener_info_destroy);
+}
+
+
+static gint listener_idx = 1;
+
+typedef struct _AtkUtilListenerInfo AtkUtilListenerInfo;
+
+struct _AtkUtilListenerInfo
+{
+   gint key;
+   guint signal_id;
+   gulong hook_id;
+};
+
+
+guint
+_atksharp_add_listener (GSignalEmissionHook listener,
+              const gchar         *object_type,
+              const gchar         *signal,
+              const gchar         *hook_data)
+{
+  GType type;
+  guint signal_id;
+  gint  rc = 0;
+
+  type = g_type_from_name (object_type);
+  if (type)
+    {
+      signal_id  = g_signal_lookup (signal, type);
+      if (signal_id > 0)
+        {
+          AtkUtilListenerInfo *listener_info;
+
+          rc = listener_idx;
+
+          listener_info = g_malloc(sizeof(AtkUtilListenerInfo));
+          listener_info->key = listener_idx;
+          listener_info->hook_id =
+                          g_signal_add_emission_hook (signal_id, 0, listener,
+			        		      g_strdup (hook_data),
+			        		      (GDestroyNotify) g_free);
+          listener_info->signal_id = signal_id;
+
+	  g_hash_table_insert(listener_list, &(listener_info->key), listener_info);
+          listener_idx++;
+        }
+      else
+        {
+          g_warning("Invalid signal type %s\n", signal);
+        }
+    }
+  else
+    {
+      g_warning("Invalid object type %s\n", object_type);
+    }
+  return rc;
+}
+
+guint atksharp_util_add_global_event_listener(
+	GSignalEmissionHook listener,
+	const gchar *event_type)
+{
+	guint rc = 0;
+	gchar **split_string;
+
+	//split_string[0]: toolkit
+	//            [1]: class/interface
+	//            [2]: event type
+	// example: Gtk:AtkObject:children-changed
+	split_string = g_strsplit (event_type, ":", 3);
+
+	g_warning(g_strdup_printf("add global event listener, event_type: %s", event_type));
+
+	if (split_string)
+	{
+		rc = _atksharp_add_listener (listener, split_string[1], split_string[2], event_type);
+
+		g_strfreev (split_string);
+	}
+
+	return rc;
+}
Index: glib/Object.cs
===================================================================
--- glib/Object.cs	(revision 101557)
+++ glib/Object.cs	(working copy)
@@ -314,6 +314,10 @@
 				return GType.Object;
 			}
 		}
+		
+		public GLib.GType GetGType () {
+			return LookupGType (this.GetType ());
+		}
 
 		[DllImport("glibsharpglue-2")]
 		static extern IntPtr gtksharp_get_type_name (IntPtr raw);
Index: glib/Signal.cs
===================================================================
--- glib/Signal.cs	(revision 101557)
+++ glib/Signal.cs	(working copy)
@@ -1,6 +1,7 @@
 // GLib.Signal.cs - signal marshaling class
 //
 // Authors: Mike Kestner <mkestner@novell.com>
+//          Andres G. Aragoneses <aaragoneses@novell.com>
 //
 // Copyright (c) 2005 Novell, Inc.
 //
@@ -57,6 +58,7 @@
 		uint before_id = UInt32.MaxValue;
 		uint after_id = UInt32.MaxValue;
 		Delegate marshaler;
+		uint signal_id;
 
 		~Signal ()
 		{
@@ -81,6 +83,18 @@
 			GC.SuppressFinalize (this);
 		}
 
+		public static uint Lookup (string signalName, GLib.GType type)
+		{
+			IntPtr signalNativeName = GLib.Marshaller.StringToPtrGStrdup (signalName);
+			
+			//TODO: don't know how to call this, none of these work:
+			uint signalId = g_signal_lookup (signalNativeName, type.val);
+			
+			GLib.Marshaller.Free (signalNativeName);
+			
+			return signalId;
+		}
+		
 		public static Signal Lookup (GLib.Object obj, string name)
 		{
 			return Lookup (obj, name, EventHandlerDelegate);
@@ -91,7 +105,7 @@
 			Signal result = obj.ToggleRef.Signals [name] as Signal;
 			if (result == null)
 				result = new Signal (obj, name, marshaler);
-			return result as Signal;
+			return result;
 		}
 
 		Delegate before_handler;
@@ -190,7 +204,45 @@
 				return event_handler_delegate;
 			}
 		}
+		
+		public static object Emit (GLib.Object instance, string signalName, string gquarkDetail, params object[] args)
+		{
+			uint signalId = GLib.Signal.Lookup (signalName, instance.GetGType ());
+			
+			uint gquark = GetGQuarkFromString (gquarkDetail);
+			
+			GLib.Value[] vals = new GLib.Value[args.Length + 1];
+			GLib.ValueArray inst_and_params = new GLib.ValueArray ((uint) args.Length + 1);
+			
+			for (int i = 0; i < vals.Length; i++)
+			{
+				if (i == 0)
+				{
+					vals [i] = new GLib.Value (instance);
+				}
+				else 
+				{
+					vals [i] = new GLib.Value (args [i - 1]);
+				}
+				inst_and_params.Append (vals [i]);
+			}
+			
+			GLib.Value ret = GLib.Value.Empty;
+			g_signal_emitv (inst_and_params.ArrayPtr, signalId, gquark, ref ret);
 
+			foreach (GLib.Value val in vals)
+				val.Dispose ();
+			
+			return ret.Val;
+		}
+		
+		public static uint GetGQuarkFromString (string str) {
+			IntPtr nativeString = GLib.Marshaller.StringToPtrGStrdup (str);
+			uint ret = g_quark_from_string (nativeString);
+			GLib.Marshaller.Free (nativeString);
+			return ret;
+		}
+		
 		[DllImport("libgobject-2.0-0.dll")]
 		static extern uint g_signal_connect_data(IntPtr obj, IntPtr name, Delegate cb, IntPtr gc_handle, IntPtr dummy, int flags);
 
@@ -202,6 +254,16 @@
 
 		[DllImport("libgobject-2.0-0.dll")]
 		static extern bool g_signal_handler_is_connected (IntPtr instance, uint handler);
+		
+		[DllImport("libgobject-2.0-0.dll")]
+		static extern void g_signal_emitv (IntPtr instance_and_params, uint signal_id, uint gquark_detail, ref GLib.Value return_value);
+		
+		[DllImport("libgobject-2.0-0.dll")]
+		static extern uint g_signal_lookup (IntPtr name, IntPtr itype);
+		
+		//better not to expose from_static_string () due to memory allocation issues
+		[DllImport("libglib-2.0-0.dll")]
+		static extern uint g_quark_from_string (IntPtr str);
 	}
 }
 
Index: glib/GType.cs
===================================================================
--- glib/GType.cs	(revision 101557)
+++ glib/GType.cs	(working copy)
@@ -30,7 +30,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	public struct GType {
 
-		IntPtr val;
+		internal IntPtr val;
 
 		public GType (IntPtr val)
 		{
