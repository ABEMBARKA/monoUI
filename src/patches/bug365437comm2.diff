Index: atk/Util.custom
===================================================================
--- atk/Util.custom	(revision 101714)
+++ atk/Util.custom	(working copy)
@@ -21,10 +21,42 @@
 // Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 // Boston, MA 02111-1307, USA.
 
+		[GLib.CDeclCallback]
+		delegate uint AddGlobalListenerNativeDelegate (IntPtr listener, string event_type);
 
+		static AddGlobalListenerDelegate add_global_event_listener_handler;
+		static AddGlobalListenerNativeDelegate add_global_event_listener_callback;
+
+		static uint AddGlobalEventListenerCallback (IntPtr listener, string event_type)
+		{
+			try {
+				return add_global_event_listener_handler (listener, event_type);
+			} catch (Exception e) {
+				GLib.ExceptionManager.RaiseUnhandledException (e, false);
+			}
+			
+			return 0;
+		}
+
+		[DllImport("atksharpglue-2")]
+		static extern void atksharp_util_override_add_global_event_listener (AddGlobalListenerNativeDelegate cb);
+		
+		public delegate uint AddGlobalListenerDelegate (IntPtr listener, string event_type);
+
+		public static AddGlobalListenerDelegate AddGlobalEventListenerHandler {
+			set {
+				add_global_event_listener_handler = value;
+				if (add_global_event_listener_callback == null)
+					add_global_event_listener_callback = new AddGlobalListenerNativeDelegate (AddGlobalEventListenerCallback);
+				atksharp_util_override_add_global_event_listener (add_global_event_listener_callback);
+			}
+		}
+
+
+
 		[GLib.CDeclCallback]
 		delegate void RemoveListenerNativeDelegate (uint listener_id);
-                
+
 		static RemoveListenerDelegate remove_global_event_listener_handler;
 		static RemoveListenerNativeDelegate remove_global_event_listener_callback;
 
@@ -40,6 +72,7 @@
 		[DllImport("atksharpglue-2")]
 		static extern void atksharp_util_override_remove_global_event_listener (RemoveListenerNativeDelegate cb);
 		
+		//shared by RemoveGlobalEventListener and RemoveKeyEventListener
 		public delegate void RemoveListenerDelegate (uint listener_id);
 
 		public static RemoveListenerDelegate RemoveGlobalEventListenerHandler {
@@ -80,7 +113,7 @@
 
 		[GLib.CDeclCallback]
 		delegate uint AddKeyEventListenerNativeDelegate (AtkSharp.KeySnoopFuncNative native_func, IntPtr data);
-                
+
 		static AddKeyEventListenerDelegate add_key_event_listener_handler;
 		static AddKeyEventListenerNativeDelegate add_key_event_listener_callback;
 
@@ -134,7 +167,7 @@
 
 		[GLib.CDeclCallback]
 		delegate IntPtr GetRootNativeDelegate ();
-                
+
 		static GetRootDelegate get_root_handler;
 		static GetRootNativeDelegate get_root_callback;
 
@@ -161,10 +194,10 @@
 				atksharp_util_override_get_root (get_root_callback);
 			}
 		}
-               
+
 		[GLib.CDeclCallback]
 		delegate IntPtr GetToolkitNameNativeDelegate ();
-                
+
 		static GetToolkitNameDelegate get_toolkit_name_handler;
 		static GetToolkitNameNativeDelegate get_toolkit_name_callback;
 		static string toolkit_name;
@@ -199,10 +232,10 @@
 				atksharp_util_override_get_toolkit_name (get_toolkit_name_callback);
 			}
 		}
-               
+
 		[GLib.CDeclCallback]
 		delegate IntPtr GetToolkitVersionNativeDelegate ();
-                
+
 		static GetToolkitVersionDelegate get_toolkit_version_handler;
 		static GetToolkitVersionNativeDelegate get_toolkit_version_callback;
 		static string toolkit_version;
@@ -237,4 +270,3 @@
 				atksharp_util_override_get_toolkit_version (get_toolkit_version_callback);
 			}
 		}
-               
Index: glib/Signal.cs
===================================================================
--- glib/Signal.cs	(revision 101714)
+++ glib/Signal.cs	(working copy)
@@ -1,6 +1,7 @@
 // GLib.Signal.cs - signal marshaling class
 //
 // Authors: Mike Kestner <mkestner@novell.com>
+//          Andres G. Aragoneses <aaragoneses@novell.com>
 //
 // Copyright (c) 2005 Novell, Inc.
 //
@@ -223,16 +224,36 @@
 			GLib.Marshaller.Free (native_string);
 			return ret;
 		}
-
-		private static uint GetSignalId (string signal_name, GLib.Object obj)
+		
+		public static uint GetSignalId (string signal_name, GLib.GType type)
 		{
+			return GetSignalId (signal_name, type.Val);
+		}
+		
+		public static uint GetSignalId (string signal_name, GLib.Object obj)
+		{
 			IntPtr typeid = gtksharp_get_type_id (obj.Handle);
+			return GetSignalId (signal_name, typeid);
+		}
+		
+		private static uint GetSignalId (string signal_name, IntPtr typeid)
+		{
 			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (signal_name);
 			uint signal_id = g_signal_lookup (native_name, typeid);
 			GLib.Marshaller.Free (native_name);
 			return signal_id;
 		}
 		
+		public static ulong AddEmissionHandler (uint signal_id, IntPtr handler_func, IntPtr data)
+		{
+			return AddEmissionHandler (signal_id, 0, handler_func, data);
+		}
+		
+		public static ulong AddEmissionHandler (uint signal_id, uint signal_detail, IntPtr handler_func, IntPtr data)
+		{
+			return g_signal_add_emission_hook (signal_id, signal_detail, handler_func, data, IntPtr.Zero);
+		}
+		
 		[DllImport("libgobject-2.0-0.dll")]
 		static extern uint g_signal_connect_data(IntPtr obj, IntPtr name, Delegate cb, IntPtr gc_handle, IntPtr dummy, int flags);
 
@@ -257,6 +278,9 @@
 		
 		[DllImport("glibsharpglue-2")]
 		static extern IntPtr gtksharp_get_type_id (IntPtr raw);
+		
+		[DllImport("libgobject-2.0-0.dll")]
+		static extern ulong g_signal_add_emission_hook (uint signal_id, uint gquark_detail, IntPtr hook_func, IntPtr hook_data, IntPtr data_destroy);
 	}
 }
 
Index: glib/GType.cs
===================================================================
--- glib/GType.cs	(revision 101714)
+++ glib/GType.cs	(working copy)
@@ -36,6 +36,10 @@
 		{
 			this.val = val;
 		}
+		
+		public GType (string native_name) : this (g_type_from_name (native_name))
+		{
+		}
 
 		public static readonly GType Invalid = new GType ((IntPtr) TypeFundamentals.TypeInvalid);
 		public static readonly GType None = new GType ((IntPtr) TypeFundamentals.TypeNone);
@@ -197,5 +201,8 @@
 		{
 			return Marshaller.Utf8PtrToString (g_type_name (val));
 		}
+		
+		[DllImport("libgobject-2.0-0.dll")]
+		static extern IntPtr g_type_from_name (string name);
 	}
 }
Index: glib/ObjectManager.cs
===================================================================
--- glib/ObjectManager.cs	(revision 101714)
+++ glib/ObjectManager.cs	(working copy)
@@ -58,7 +58,7 @@
 		[Obsolete ("Replaced by GType.Register (GType, Type)")]
 		public static void RegisterType (string native_name, string mangled)
 		{
-			RegisterType (new GType (g_type_from_name (native_name)), Type.GetType (mangled));
+			RegisterType (new GType (native_name), Type.GetType (mangled));
 		}
 
 		[Obsolete ("Replaced by GType.Register (GType, Type)")]
@@ -86,8 +86,5 @@
 
 		[DllImport("libgobject-2.0-0.dll")]
 		static extern IntPtr g_type_parent (IntPtr typ);
-
-		[DllImport("libgobject-2.0-0.dll")]
-		static extern IntPtr g_type_from_name (string name);
 	}
 }
