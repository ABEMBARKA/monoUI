Index: glib/Signal.cs
===================================================================
--- glib/Signal.cs	(revision 102566)
+++ glib/Signal.cs	(working copy)
@@ -314,12 +314,25 @@
 		private static uint GetSignalId (string signal_name, GLib.Object obj)
 		{
 			IntPtr typeid = gtksharp_get_type_id (obj.Handle);
+			return GetSignalId (signal_name, typeid);
+		}
+		
+		private static uint GetSignalId (string signal_name, IntPtr typeid)
+		{
 			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (signal_name);
 			uint signal_id = g_signal_lookup (native_name, typeid);
 			GLib.Marshaller.Free (native_name);
 			return signal_id;
 		}
 		
+		public static ulong AddEmissionHook (string signal_name, uint signal_detail, GLib.GType type, EmissionHook handler_func, IntPtr data)
+		{
+			uint signal_id = GetSignalId (signal_name, type.Val);
+			if (signal_id == 0)
+				throw new Exception ("Invalid signal");
+			return g_signal_add_emission_hook (signal_id, signal_detail, new EmissionHookMarshaler (handler_func).Callback, data, IntPtr.Zero);
+		}
+		
 		[DllImport("libgobject-2.0-0.dll")]
 		static extern IntPtr g_signal_get_invocation_hint (IntPtr instance);
 
@@ -335,6 +348,10 @@
 		
 		[DllImport("glibsharpglue-2")]
 		static extern IntPtr gtksharp_get_type_id (IntPtr raw);
+		
+		[DllImport("libgobject-2.0-0.dll")]
+		static extern ulong g_signal_add_emission_hook (uint signal_id, uint gquark_detail, EmissionHookNative hook_func, IntPtr hook_data, IntPtr data_destroy);
+
 	}
 }
 
Index: glib/GType.cs
===================================================================
--- glib/GType.cs	(revision 102566)
+++ glib/GType.cs	(working copy)
@@ -37,6 +37,11 @@
 			this.val = val;
 		}
 
+		public static GType FromName (string native_name)
+		{
+			return new GType (g_type_from_name (native_name));
+		}
+		
 		public static readonly GType Invalid = new GType ((IntPtr) TypeFundamentals.TypeInvalid);
 		public static readonly GType None = new GType ((IntPtr) TypeFundamentals.TypeNone);
 		public static readonly GType Interface = new GType ((IntPtr) TypeFundamentals.TypeInterface);
@@ -195,6 +200,9 @@
 
 		[DllImport("libgobject-2.0-0.dll")]
 		static extern IntPtr g_type_name (IntPtr raw);
+		
+		[DllImport("libgobject-2.0-0.dll")]
+		static extern IntPtr g_type_from_name (string name);
 
 		public override string ToString ()
 		{
Index: glib/ObjectManager.cs
===================================================================
--- glib/ObjectManager.cs	(revision 102566)
+++ glib/ObjectManager.cs	(working copy)
@@ -58,7 +58,7 @@
 		[Obsolete ("Replaced by GType.Register (GType, Type)")]
 		public static void RegisterType (string native_name, string mangled)
 		{
-			RegisterType (new GType (g_type_from_name (native_name)), Type.GetType (mangled));
+			RegisterType (GType.FromName (native_name), Type.GetType (mangled));
 		}
 
 		[Obsolete ("Replaced by GType.Register (GType, Type)")]
@@ -86,8 +86,5 @@
 
 		[DllImport("libgobject-2.0-0.dll")]
 		static extern IntPtr g_type_parent (IntPtr typ);
-
-		[DllImport("libgobject-2.0-0.dll")]
-		static extern IntPtr g_type_from_name (string name);
 	}
 }
